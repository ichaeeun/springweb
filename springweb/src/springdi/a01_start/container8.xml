<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:c="http://www.springframework.org/schema/c"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/websocket
      http://www.springframework.org/schema/websocket/spring-websocket.xsd" >
      
      <!--  
      # component-scan 옵션 
      1. 특정한 package를 지정하여 해당 패키지에 포함되어 있는 객체를 
      	선택하여 container메모리에 로딩하는 것을 말한다. 
      	기본옵션으로 해당 패키지에 포함된 클래스는 annotation으로 
      	@Component라고 선언되어 있으면, 객체로 등록하여 활용할 수 있다. 
      	
      2. 해당 객체들의 id/name값은 자동으로 클래스명의 소문자형태로 지정이 된다. 
      	(id ="book") class="springdi.z01_vo.Book"
      3. 객체의 DL(외부에서 호출하여 사용할 떄)의 id/name값을 변경하고자 할때는 @Component("설정하고자하는id명")
     	형식으로 처리한다. 
     	@Component("p01") 
     	class Person{}
     	1) 해당 패키지에서 여러가지 형태로 객체를 선별하여 처리 
     		<context:include-filter type="" expression=""> 
     		- type의 속성 
     		annotation : @형태로 객체를 filtering할 때 사용된다. 
     		regex : 정규식표현으로 객체를 filtering할 때 사용된다. 
     		assignable : 클래스명 그대로 객체를 filtering할 때 사용된다. 
     		aspectj : 클래스이름을 AspectJ표현식에 의해 filtering할 때 사용된다. 
     		
       -->
       <context:component-scan base-package="springdi.z01_vo"></context:component-scan>
       <!--ex) springdi.z02_vo에 Person, Product 클래스를 넣
       		해당 패키지에 있는 내용이 호출되어 사용할 수 있게 하세요 
       		Person : 이름 p02, Product 이름 prod03 으로 설정 
        -->
         <context:component-scan base-package="springdi.z02_vo"></context:component-scan>
         
        <context:component-scan base-package="springdi.z03_vo">
        
        <!-- scan의 형식을 type="regex" 정규식으로 정의 
        	expression=".*" 하위에 있는 모든 클래스를 객체화하여 처리 
        	(class에 @Component가 없더라도 처리가능)
         -->
         	<context:include-filter type="regex" expression=".*"/>
        </context:component-scan>
         
</beans>      








