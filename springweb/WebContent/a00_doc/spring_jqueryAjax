# spring을 통한 ajax 처리 
1. 스프링 환경 하에 ajax 처리 방식 
	스프링에서 웹 환경에서 비동기적으로 ajax를 처리할 수 있는데, 
	기존 jsp보다 더 효과적인 json데이터를 처리하고 요청 프로세스를 
	받을 수 있다. 
	1) 프로세스 
		브라우저 화면 ==> 이벤트를 통한 요청 데이터 호출 ==> 스프링 
		기반 서버 ==> 요청데이터를 json 형식으로 전달 ==> jquery에서 
		받은 json데이터 DOM 생성 코드를 통해서 화면에서 출력 처리 
	2) 개발 순서 
		컨테이너에 json데이터 처리 view bean 선언 (pageJsonReport) 
		spring 기본 초기 화면 controller, viwe단 생성 
		비동기에 의해 필요로 하는 데이터 처리 sql 작성 
		dao 작성 
		XXXmapper.xml 작성 
		service 
		controller 에서 해당 기본 데이터 호출 화면에 로딩(json데이터 화면) 
		spring 기본 초기 화면에서 event처리 jquery ajax호출 코드를 통해서 
			controller에 mapping 되어 있는 데이터 처리 호출 
			$.ajax({속성:속성값...});
			success:function(data){}
			data를 통해 받은 json데이터를 DOM객체 생성 코드를 통해서 처리 완료 
			
		
		
2. 스프링에서 ajax를 위해서 처리해야할 부분 
	1) server단에서 사용하는 객체형식은 json형식을 문자열로 생성한다. 
		ex) {"속성":"속성값","속성",숫자형속성값}
			new Person("홍길동",25,"강남")
			 ==> {"name":"홍길동","age":25,"loc":"강남"} 
	2) bean으로 스프링 프레임워크에서 객체를 json문자열로 변환시켜주는 
		viewresolver를 컨테이너에 선언하고, 해당 호출 객체(url mapping 메서드)는 
		view단 호출을 이 bean으로 호출하면 model설정된 객체가 
		json문자열로 변환하여 client에 전달한다. 
	3) 처리 순서 
		- 환경 설정 
			container에 bean viewResolver를 등록 
			json view를 등록 
		- controller에서 요청으로 호출하면, 
			return "선언된 json처리 viewer" 
	4) model 데이터의 json데이터 변환 기준 
		m.setAttribute("emp",service.empList(sch));
		{"emp":""} : 하나의 데이터 일 때 
		{"emp":{"empno":7980,"ename":"홍길동"...}} : 1개 row단위 데이터  
		{"emp":[{"empno":7980,"ename":"홍길동"...},{},{},{},...]} : 다중 row단위 데이터  
		
			
3. jquery를 통한 ajax 통신 데이터 처리 
	1) 서버단에 전달해온 데이터는 jquery에서 특정 이벤트에 의해, 
		json문자열을 json객체로 변환해서 비동기적으로 활용한다. 
	2) $.ajax({
			속성:속성값,
			속성:속성값,
			success:funtion(json){
				// 서버에서 받은 json객체를 활용할 수 있게 된다. 
			}
	    });
	3) 속성 
		type : 요청의 전달 방식 get/post방식 
		url : 데이터를 가져올 controller단 mapping url ex) jsonEmp.do 
		data : 서버에 요청할 query String 
			- 순수 query String : "key=value&key=value.." 
			- json객체형 : {key:value, key:value}
			- form요소자동 query string 변경 + 한글 encoding 처리 : 
				$("form").serialize()  
		dataType : 결과값을 받는 형식을 지정, JSON.parse(), eval() 함수를 이용해서 
			객체형으로 변환하지 않더라도 정상적으로 처리가 된다. 
				xml(jsp/html로 DOM화면을 받아서 바로 처리), 
				json(객체변환 필요하지 않음), 
				text   
		success:function(data){}
			정상적으로 받았을 때, 처리할 데이터를 매개변수(data)로 처리할 수 있다. 
			받은 객체를 each구문을 통해서 화면에 DOM객체로 할당 처리한다. 
			controller 선언 : m.setAttribute("emp",...); 
			data.모델명
			{"emp":"안녕"} : 하나의 데이터 일 때 
				data.emp ==> "안녕" 		
			
			{"emp":{"empno":7980,"ename":"홍길동"...}} : 1개 row단위 데이터  
				data.emp.empno ==> 7980
				var emp = data.emp;
				emp.empno// emp.ename // emp.job... 
			
			{"emp":[{"empno":7980,"ename":"홍길동"...},{},{},{},...]} : 다중 row단위 데이터  
				var empList = data.emp;
				$(empList).each(function(idx,emp,array){
					
				});
		
		error:function(err){}
			에러 발생했을 때, 처리할 함수정의 
		
ex) 연습예제 
 회원 id 등록 여부 확인 
 1. 처리순서 
 	1) sql 
 		SELECT * FROM MEMBEREXP;
		-- id, pass, name, point, loc, regdate,author 
		SELECT count(*) FROM MEMBEREXP m 
		WHERE id= 'himan';
	2) dao 작성 
	3) mapper 작성 
	4) controller 단 작성  A03_AjaxController.java
		- 기본 화면 호출 
			회원등록 여부 
			[	][확인] enter 키나 버튼 둘다 
			WEB-INF/views/a03_ajax/a03_regMember.jsp
		- 데이터처리 
			$.ajax();



# ajax 실무 처리 
1. 언제 처리하여야 하는가? 
	1) 웹서비스(client <==> server) 
	2) 요청 : page/요청값 
	3) ajax로 처리하는 방식 
		- 기본화면(jsp/html) 위에, 
		- js로 서버에 요청값과 함께 json데이터를 호출방식 
	4) 사용되는 유형 
		# 핵심 프로세스 
		- 화면 전환을 하지 않고(***)
		- 특정 데이터를 가져와서 DOM단위로 요소객체에 데이터를 할당할 때 
		# 예제
		- 회원 등록 시, id값으로 등록여부 확인 
		- 검색 시, 화면을 전체 refresh하지 않고 출력처리 
		- 키워드 입력과 동시에 해당 내용을 출력할 때 
		- js lib를 json데이터를 가져와서 처리하는 경우 
			캘린더 
				json데이터 할당처리 
				events:function(callback,...){
					success:function(data){
						callback(data.list);
					}
				}
			대시보드 
				<div id="pie01" ratio="15%"/>
				success:function(data){
					$("#pie01").attr("ratio",data.dash.ratio);
				}
		
2. 객체의 json데이터 변경(pageJsonReport) (backend단) 이해 
	1) VO, ArrayList<VO> : pageJsonReport로 선언한 bean객체에서 
		json데이터로 변환해준다. 
	2) model로 선언한 부분과 함께 json데이터를 가져올 수 있다. 
		
	

3. ajax 처리의 핵심 키워드 
	0) json 형태 모델데이터 처리 Controller 선언(backend단) 
	1) 요청값 
	2) 데이터 처리 방식 
	3) success 함수 처리 이후 내용 
	





