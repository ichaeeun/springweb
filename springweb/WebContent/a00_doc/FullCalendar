# ajax를 활용한 fullcalendar plugin 활용하기 
1. spring에서 지원하는 json viewer를 이용하여 
	backend단의 데이터를 fullcalendar api와 연동하여 
	효과적인 calendar 데이터를 처리한다. 
2. 개발 순서 
	1) fullcalendar lib 다운로드
	2) jsp 환경으로 front end단 lib 호출 처리 :
		css, jquery lib 공통 호출 jsp의 ${path} 환경에서 호출 처리 
		
	3) fullcalendar api의 json데이터와 주요 핵심 기능 메서드 확인 
	4) 주요 기능 정의 : 리스트 처리, 초기 등록, 수정 변경, 삭제 
	5) fullcalendar 기본 sample 예제 및 api를 통해서 
		json데이터를 테이블 구조로 변경하여 테이블 생성, sample데이터 입력 
	6) 사용하게 될 sql 작성 
		- 조회 
		- 등록
		- 수정
		- 삭제
	7) 해당 내용을 처리하기 위한 vo/dto 정의 
	8) sql 기반으로 하여 dao 작성 
	9) mybatis.spring.xml에 사용할 vo/dto alias 및 CalMapper.xml 등록 
	10) CalMapper.xml 에서 작성한 dao와 연동 처리 
	11) service작성 및 dao 호출 
	12) Controller 작성 
		- 초기 화면 호출 
		- ajax 호출 기능메서드 구현 
			조회
			등록
			수정
			삭제
	13) view단에서 해당 데이터 list/수정/삭제 ajax 호출 처리 
	14) 각 기능별 기능 메서드 구현 
	
# spring controller 통해서 초기 화면 처리 
1. 스프링 controller / fullcalendar호출 화면 만들기 
2. 필요한 lib 특정 위치에 복사 처리 
	WebContent\fullcalendar-5.6.0\lib 폴더를 
	WebContent\a00_com 에 위치
3. jsp에 해당 내용 controller 호출하여 보일 수 있게 처리 
	WebContent/fullcalendar-5.6.0/examples/selectable.html 에 있는 내용을 
	WEB-INF/views/a03_ajax/a04_fullcalendar.jsp 만들어 놓은 view단에 복사처리 
4. 초기 화면 호출 
	controller의 url mapping 
	
# FullCalendar api의 json데이터와 주요 핵심 기능 메서드 확인 
1. new FullCalendar.Calendar(calendarEl,{속성,속성값..});
	1) calendarEl : 화면에서 지정한 DOM객체 
	2) {속성,속성값..} : calendar에 활용할 속성들 
2. 주요 속성 
	1) headerToolbar : 상단 타이틀 옵션 설정 
	2) initialDate : 초기 로딩 기준일 
	3) 주요 이벤트 
		형식 - 이벤트명:function(){} : 각 날짜에 대한 이벤트를 통해 처리할 내용 
		# select : function(arg){} 
			없는 일정에 클릭이나, 시간을 클릭 후 스크롤링 했을 때 
			arg는 해당 날짜(시작/마지막/종일여부) 속성을 가져온다. 
			arg 객체의 속성들 
			arg.start : 선택한 시작 날짜 
			arg.end : 선택한 마지막 날짜 
			arg.allDay : 종일일정여부 
			calendar.addEvent(추가할 일정을 json형식); 
			매개변수로 받은 일정을 화면에 반영하기 위한 일정 추가 이벤트 처리 
			ex) 
        	    calendar.addEvent({
            	title: title,
            	start: arg.start,
            	end: arg.end,
            	allDay: arg.allDay
          	})
		# eventClick : 현재 보이는 일정을 클릭시 처리 내용 
			eventClick : function(arg){
				allDay:true // 종일 여부 
				backgroundColor: "" // 배경색상 
				borderColor : "" // 테두리 색상 
				end: null // 마지막일
				extenedProps: Object // 추가할 속성 
				id:"" // 식별자 
				start: Thu Apr 01 2021 00:00:00 GMT+0900 
				textColor: "" // 글자색 
				title: "All Day Event" //보이 타이틀 
				url:"" // 링크할 url 
				
				arg.event.remove() : 기존 일정 삭제 시 처리하는 이벤트 
			}	
	4)  화면에 리스트 되는 일정 json형식으로 출력 
			events[
			{	
				title:"",
				start:"",
			}
		ex) 등록시 배경색 노랑, 배경색 파랑으로 처리 
		ex) events에 json으로 4/30 일정등록 제목은 수료일 
			글자색, 배경색 처리 
	
	
# 속성을 이용한 데이터베이스 테이블 만들기 
id 
groupId
title
writer
content
start
end
allDay
textColor
backgroundColor
borderColor
                                                  
create table calendar(
	id number primary key, 
	groupId number, 
	title varchar2(50),
	writer varchar2(50),
	content varchar2(1000),
	start1 date,
	end1 date,
	allDay number(1),
	textColor varchar2(50),
	backgroundColor varchar2(50),
	borderColor varchar2(50)
);	
create sequence cal_seq(
	start with 1 
	increment by 1 
	minvalue 1 
	maxvalue 9999999
	no cycle
);




	 
 # 속성 확인 
 {start: Thu Apr 08 2021 00:00:00 GMT+0900 (대한민국 표준시), 
  end: Fri Apr 09 2021 00:00:00 GMT+0900 (대한민국 표준시), 
  startStr: "2021-04-08", endStr: "2021-04-09", allDay: true, …}
  allDay: true
  end: Fri Apr 09 2021 00:00:00 GMT+0900 (대한민국 표준시) {}
  endStr: "2021-04-09" 
  jsEvent: MouseEvent {isTrusted: true, screenX: 2046, screenY: 450, clientX: 606, clientY: 314, …}
  start: Thu Apr 08 2021 00:00:00 GMT+0900 (대한민국 표준시) {}
  startStr: "2021-04-08"
  view: ViewApi {type: "dayGridMonth", dateEnv: DateEnv, getCurrentData: ƒ}
	
  # 있는 일정 클릭시 arg.event 속성 
  allDay: true  // 종일여부. 시간일 떄는 false 
  allow: (...)
  backgroundColor: (...) // 배경색상 
  borderColor: (...) // 테두리 색상 
  classNames: (...) 
  constraint: (...)
  display: (...)
  durationEditable: (...)
  end: null // 마지막일때 
  endStr: (...)
  extendedProps: Object 추가할 속성 
  groupId: (...) // 그룹으로 지정할 때 
  id: "" // 식별자 
  overlap: (...)
  source: (...)
  start: Thu Apr 01 2021 00:00:00 GMT+0900(대한민국 표준시) // 시작일 
  startEditable: (...)
  startStr: (...)
  textColor: (...) // 글자색 
  title: (...) // 보일 제목 
  url: (...) // 링크할 uri 		
		
	
	
# 캘린더 등록 처리 
1. 화면 처리 방식 결정 
	1) 등록할 속성값 지정 
		id [DB] 
		groupId [DB] 
		title [입력] 
		writer [입력]
		content [입력]
		start [full api]
		end [full api]
		allDay [full api]
		textColor [입력] 
		backgroundColor [입력] 
		borderColor [입력]  
	2) 등록할 화면 로딩(diaologue-jquery ui/bootstrap으로 처리) 
		위에 있는 입력값을 
		ex1) form에 넣고, jquery ui dialog 화면 처리 
		ex2) bootstrap dialog 화면처리
		1) 기본화면구성
			<div id="schDialog" title="일정 등록">
  				<form id="frm"> 
  					<input name="id" type="hidden" value="0"/>
		2) css 설정
			(주의 : 다른 css 호출의 마지막 부분에 설정) 
			input[type=text], select, label, textarea{
			  	margin-bottom:12px; 
			  	padding:.4em;
			  	width:95%;
		  	} 
		3) jquery 설정 
			- 기본 옵션으로 dialog 설정 
				var opts = {
						 autoOpen:false,
						 width:"350px",
						 modal:true
				 }
			 	 $( "#schDialog" ).dialog(opts);
	 
			- 등록 처리할 때 등록버튼이 추가된 dialog 설정 및 open 
				select: function(arg) {
				console.log(arg); // console을 통해서 해당 속성 확인 
				
				opts.buttons={
					"등록":function(){
						
					}
				};
				$("#schDialog").dialog(opts);
				$("#schDialog").dialog("open");
				$("[name=start]").val(arg.start.toLocaleString());
				$("[name=end]").val(arg.end.toLocaleString());
				$("[name=allDay]").val(""+arg.allDay);
					
				
			
		
	3) 등록 버튼 클릭시, ajax 처리 
		"등록": function(	){}
		부분에 등록 버튼 클릭 시 처리할 ajax를 선언합니다. 
		- 우선, 전달할 데이터를 json형식으로 정리 
		- calendar.addEvent(추가할 json데이터) : 화면에 반영 
		- $.ajax();를 통해서 서버에 요청값으로 전달 
		
	4) controller 단 호출 및 작성 
2. SQL 작성 
	1) 등록 
	INSERT INTO calendar values(cal_seq.nextval,'','일정등록시작',
								'홍길동','내용',
								to_date('2021/04/01','YYYY/MM/DD'),
							 	to_date('2021/04/02','YYYY/MM/DD'),1,
							 	'yellow','navy','navy')
3. SQL에 맞는 VO 확인	
4. dao 작성 
	public void insertCalendar(Calendar ins);
5. mapper.xml 작성
6. service 작성 
7. controller 호출 service처리 
	/calendar.do?method=insert 	
8. 화면단 ajax 처리 

	


	
	